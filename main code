<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hoopers Hub - Basketball Community Platform</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #121212;
            color: #ffffff;
        }

        /* Header Navigation */
        .header {
            background: rgba(26, 26, 26, 0.95);
            backdrop-filter: blur(10px);
            border-bottom: 2px solid #333;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 900;
            color: #FDB022;
            text-transform: uppercase;
            cursor: pointer;
        }

        .nav-links {
            display: flex;
            gap: 1rem;
        }

        .nav-btn {
            padding: 0.5rem 1rem;
            background: transparent;
            color: #FDB022;
            border: 2px solid #FDB022;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            text-transform: uppercase;
            transition: all 0.3s;
        }

        .nav-btn:hover, .nav-btn.active {
            background: #FDB022;
            color: #000;
        }

        /* Page Sections */
        .page {
            display: none;
            min-height: 100vh;
        }

        .page.active {
            display: block;
        }

        /* Hero Section */
        .hero {
            min-height: 100vh;
            background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)),
                        #333;
            background-size: cover;
            background-position: center;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .hero-content {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }

        h1 {
            font-size: 4rem;
            font-weight: 900;
            color: #FDB022;
            text-transform: uppercase;
            margin-bottom: 2rem;
            line-height: 1.2;
        }

        .goal-box {
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 8px;
            border: 2px solid #FF8C42;
            margin: 2rem 0;
        }

        .goal-box h2 {
            color: #FF8C42;
            font-size: 2rem;
            font-weight: bold;
            text-transform: uppercase;
            margin-bottom: 1rem;
        }

        .goal-box p {
            font-size: 1.125rem;
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .highlight {
            color: #FDB022;
            font-weight: bold;
        }

        /* Categories Grid */
        .categories {
            padding: 5rem 2rem;
            background: #0a0a0a;
        }

        .section-title {
            font-size: 3rem;
            font-weight: 900;
            color: #FDB022;
            text-transform: uppercase;
            margin-bottom: 1rem;
            text-align: center;
        }

        .section-subtitle {
            font-size: 1.25rem;
            color: #999;
            margin-bottom: 3rem;
            text-align: center;
        }

        .category-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .category-card {
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid #333;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s;
            cursor: pointer;
        }

        .category-card:hover {
            border-color: #FDB022;
            transform: scale(1.05);
            box-shadow: 0 0 40px rgba(253, 176, 34, 0.4);
        }

        .category-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .category-card h3 {
            font-size: 1.5rem;
            font-weight: bold;
            text-transform: uppercase;
            margin-bottom: 0.5rem;
            color: #fff;
        }

        .category-card p {
            color: #999;
        }

        /* Form Section */
        .form-section {
            padding: 4rem 2rem;
            background: #0a0a0a;
        }

        .form-card {
            background: rgba(26, 26, 26, 0.95);
            border: 2px solid #FDB022;
            border-radius: 8px;
            padding: 2rem;
            max-width: 600px;
            margin: 0 auto;
        }

        .form-card h2 {
            color: #FDB022;
            font-size: 2rem;
            margin-bottom: 1.5rem;
            text-transform: uppercase;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            color: #fff;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.75rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #333;
            border-radius: 4px;
            color: #fff;
            font-size: 1rem;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #FDB022;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .submit-btn {
            width: 100%;
            padding: 1rem;
            background: #FDB022;
            color: #000;
            font-weight: bold;
            text-transform: uppercase;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .submit-btn:hover {
            background: #e09f1f;
        }

        .submit-btn:disabled {
            background: #666;
            cursor: not-allowed;
        }

        /* Listing Cards */
        .listings-section {
            padding: 4rem 2rem;
        }

        .listings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .listing-card {
            background: rgba(26, 26, 26, 0.95);
            border: 2px solid #333;
            border-radius: 8px;
            padding: 1.5rem;
            transition: all 0.3s;
        }

        .listing-card:hover {
            border-color: #FDB022;
            box-shadow: 0 0 20px rgba(253, 176, 34, 0.3);
        }

        .listing-card h3 {
            color: #FDB022;
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
        }

        .listing-type {
            color: #FF8C42;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .listing-location {
            color: #999;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .listing-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .tag {
            background: rgba(253, 176, 34, 0.2);
            color: #FDB022;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.8rem;
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #999;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #22c55e;
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            display: none;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }

        .toast.error {
            background: #ef4444;
        }

        .toast.show {
            display: block;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .nav-links {
                gap: 0.5rem;
            }

            .nav-btn {
                padding: 0.5rem;
                font-size: 0.8rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <div class="logo" onclick="showPage('home')">Hoopers Hub</div>
            <div class="nav-links" id="mainNav">
                <button class="nav-btn" id="authBtn" onclick="showPage('auth')" data-page="auth">Login</button>
            </div>
        </div>
    </header>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>

    <!-- Home Page -->
    <div id="home" class="page active">
        <section class="hero">
            <div class="container">
                <div class="hero-content">
                    <h1>Find What You Need.</h1>
                    
                    <div class="goal-box">
                        <h2>Our Goal:</h2>
                        <p>We intend to supply the basketball community with a resource to find and connect with the right people.</p>
                        <p>Whether you want a team to join, a trainer to help you, or even just a casual game of 5on5, <span class="highlight">HOOPERS HUB</span> got you.</p>
                    </div>
                </div>
            </div>
        </section>

        <section class="categories">
            <div class="container">
                <h2 class="section-title">What We Offer:</h2>
                <p class="section-subtitle">Browse our categories to find exactly what you're looking for</p>
                
                <div class="category-grid">
                    <div class="category-card" onclick="checkAuthAndNavigate('trainers')">
                        <div class="category-icon">💪</div>
                        <h3>Trainers</h3>
                        <p>Get personalized training and conditioning</p>
                    </div>
                    
                    <div class="category-card" onclick="checkAuthAndNavigate('players')">
                        <div class="category-icon">👥</div>
                        <h3>Players</h3>
                        <p>Connect with basketball players in your area</p>
                    </div>
                    
                    <div class="category-card">
                        <div class="category-icon">🎓</div>
                        <h3>Coaches</h3>
                        <p>Find experienced coaches to level up your game</p>
                    </div>
                    
                    <div class="category-card">
                        <div class="category-icon">🛡️</div>
                        <h3>Teams</h3>
                        <p>Join or create competitive teams</p>
                    </div>
                    
                    <div class="category-card">
                        <div class="category-icon">🏆</div>
                        <h3>Tournaments</h3>
                        <p>Compete in local and regional tournaments</p>
                    </div>
                    
                    <div class="category-card">
                        <div class="category-icon">▶️</div>
                        <h3>Pickup</h3>
                        <p>Find casual pickup games near you</p>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Auth Page -->
    <div id="auth" class="page">
        <section class="form-section">
            <div class="container">
                <div class="form-card">
                    <h2 id="authTitle">Login</h2>
                    <form id="authForm" onsubmit="handleAuth(event)">
                        <div class="form-group">
                            <label for="authEmail">Email *</label>
                            <input type="email" id="authEmail" name="email" required maxlength="255">
                        </div>

                        <div class="form-group">
                            <label for="authPassword">Password *</label>
                            <input type="password" id="authPassword" name="password" required minlength="6">
                        </div>

                        <button type="submit" class="submit-btn" id="authSubmitBtn">Login</button>
                    </form>
                    
                    <div style="text-align: center; margin-top: 1rem; color: #999;">
                        <span id="authToggleText">Don't have an account?</span>
                        <a href="#" onclick="toggleAuthMode(event)" style="color: #FDB022; font-weight: bold; margin-left: 0.5rem;">Sign Up</a>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Players Page -->
    <div id="players" class="page">
        <section class="form-section">
            <div class="container">
                <div class="form-card">
                    <h2>Register as a Player</h2>
                    <form id="playerForm" onsubmit="handlePlayerSubmit(event)">
                        <div class="form-group">
                            <label for="playerName">Full Name *</label>
                            <input type="text" id="playerName" name="name" required maxlength="100">
                        </div>

                        <div class="form-group">
                            <label for="playerPosition">Position *</label>
                            <input type="text" id="playerPosition" name="position" required placeholder="e.g., Point Guard, Center">
                        </div>

                        <div class="form-group">
                            <label for="playerExperience">Experience Level *</label>
                            <input type="text" id="playerExperience" name="experience" required placeholder="e.g., High School, College, Recreational">
                        </div>

                        <div class="form-group">
                            <label for="playerLocation">Location *</label>
                            <input type="text" id="playerLocation" name="location" required placeholder="e.g., Los Angeles, CA">
                        </div>

                        <div class="form-group">
                            <label for="playerGoals">What are your goals? *</label>
                            <textarea id="playerGoals" name="goals" required placeholder="Tell us what you want to achieve..."></textarea>
                        </div>

                        <button type="submit" class="submit-btn" id="playerSubmitBtn">Register</button>
                    </form>
                </div>
            </div>
        </section>

        <section class="listings-section">
            <div class="container">
                <h2 class="section-title">Registered Players</h2>
                <div id="playersGrid" class="listings-grid"></div>
                <div id="playersEmpty" class="empty-state">
                    <p>No players registered yet. Be the first to join!</p>
                </div>
            </div>
        </section>
    </div>

    <!-- Trainers Page -->
    <div id="trainers" class="page">
        <section class="form-section">
            <div class="container">
                <div class="form-card">
                    <h2>Register as a Trainer</h2>
                    <form id="trainerForm" onsubmit="handleTrainerSubmit(event)">
                        <div class="form-group">
                            <label for="trainerName">Full Name *</label>
                            <input type="text" id="trainerName" name="name" required maxlength="100">
                        </div>

                        <div class="form-group">
                            <label for="trainerSpecialty">Specialty *</label>
                            <input type="text" id="trainerSpecialty" name="specialty" required placeholder="e.g., Strength & Conditioning">
                        </div>

                        <div class="form-group">
                            <label for="trainerExperience">Years of Experience *</label>
                            <input type="text" id="trainerExperience" name="experience" required placeholder="e.g., 5 years">
                        </div>

                        <div class="form-group">
                            <label for="trainerLocation">Location *</label>
                            <input type="text" id="trainerLocation" name="location" required placeholder="e.g., Los Angeles, CA">
                        </div>

                        <div class="form-group">
                            <label for="trainerCertifications">Certifications *</label>
                            <input type="text" id="trainerCertifications" name="certifications" required placeholder="e.g., CSCS, CPT">
                        </div>

                        <div class="form-group">
                            <label for="trainerBio">About You & Training Philosophy *</label>
                            <textarea id="trainerBio" name="bio" required placeholder="Tell us about your training approach..."></textarea>
                        </div>

                        <button type="submit" class="submit-btn" id="trainerSubmitBtn">Register</button>
                    </form>
                </div>
            </div>
        </section>

        <section class="listings-section">
            <div class="container">
                <h2 class="section-title">Registered Trainers</h2>
                <div id="trainersGrid" class="listings-grid"></div>
                <div id="trainersEmpty" class="empty-state">
                    <p>No trainers registered yet. Be the first to join!</p>
                </div>
            </div>
        </section>
    </div>

    <script>
        // State Management
        let players = [];
        let trainers = [];
        let currentUser = null;
        let isLoginMode = true;

        // Initialize auth state
        function initAuth() {
            const user = localStorage.getItem('hoopersHubUser');
            if (user) {
                currentUser = JSON.parse(user);
                updateAuthUI();
            }
        }

        // Update UI based on auth state
        function updateAuthUI() {
            const authBtn = document.getElementById('authBtn');
            if (currentUser) {
                authBtn.textContent = 'Logout';
                authBtn.onclick = handleLogout;
            } else {
                authBtn.textContent = 'Login';
                authBtn.onclick = () => showPage('auth');
            }
        }

        // Toggle between login and signup
        function toggleAuthMode(event) {
            event.preventDefault();
            isLoginMode = !isLoginMode;
            const title = document.getElementById('authTitle');
            const submitBtn = document.getElementById('authSubmitBtn');
            const toggleText = document.getElementById('authToggleText');
            const link = event.target;
            
            if (isLoginMode) {
                title.textContent = 'Login';
                submitBtn.textContent = 'Login';
                toggleText.textContent = "Don't have an account?";
                link.textContent = 'Sign Up';
            } else {
                title.textContent = 'Sign Up';
                submitBtn.textContent = 'Sign Up';
                toggleText.textContent = 'Already have an account?';
                link.textContent = 'Login';
            }
        }

        // Handle auth form submission
        async function handleAuth(event) {
            event.preventDefault();
            
            const email = document.getElementById('authEmail').value;
            const password = document.getElementById('authPassword').value;
            
            if (isLoginMode) {
                // Login
                const users = JSON.parse(localStorage.getItem('hoopersHubUsers') || '{}');
                if (users[email] && users[email] === password) {
                    currentUser = { email };
                    localStorage.setItem('hoopersHubUser', JSON.stringify(currentUser));
                    updateAuthUI();
                    showToast('Login successful!');
                    showPage('home');
                    document.getElementById('authForm').reset();
                } else {
                    showToast('Invalid email or password', true);
                }
            } else {
                // Sign up
                const users = JSON.parse(localStorage.getItem('hoopersHubUsers') || '{}');
                if (users[email]) {
                    showToast('Email already registered', true);
                } else {
                    users[email] = password;
                    localStorage.setItem('hoopersHubUsers', JSON.stringify(users));
                    currentUser = { email };
                    localStorage.setItem('hoopersHubUser', JSON.stringify(currentUser));
                    updateAuthUI();
                    showToast('Sign up successful!');
                    showPage('home');
                    document.getElementById('authForm').reset();
                    isLoginMode = true;
                }
            }
        }

        // Handle logout
        function handleLogout() {
            currentUser = null;
            localStorage.removeItem('hoopersHubUser');
            updateAuthUI();
            showToast('Logged out successfully');
            showPage('home');
        }

        // Check auth before navigating
        function checkAuthAndNavigate(page) {
            if (!currentUser) {
                showToast('Please login to access this page', true);
                showPage('auth');
            } else {
                showPage(page);
            }
        }

        // Page Navigation
        function showPage(pageName) {
            // Hide all pages
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            
            // Remove active class from all nav buttons
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected page
            document.getElementById(pageName).classList.add('active');
            
            // Add active class to clicked nav button
            document.querySelector(`[data-page="${pageName}"]`).classList.add('active');
        }

        // Toast Notification
        function showToast(message, isError = false) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = 'toast show';
            if (isError) toast.classList.add('error');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Player Form Submission
        async function handlePlayerSubmit(event) {
            event.preventDefault();
            
            const submitBtn = document.getElementById('playerSubmitBtn');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Submitting...';
            
            const formData = new FormData(event.target);
            const playerData = {
                name: formData.get('name'),
                position: formData.get('position'),
                experience: formData.get('experience'),
                location: formData.get('location'),
                goals: formData.get('goals')
            };
            
            // Prepare Web3Forms data
            const emailData = {
                access_key: '5f00a5e3-6e98-473a-bc9a-8653dfaf6f92',
                subject: 'New Player Registration - Hoopers Hub',
                from_name: 'Hoopers Hub',
                to: 'ladwarikin@gmail.com',
                name: playerData.name,
                message: `New Player Registration:
                
Name: ${playerData.name}
Position: ${playerData.position}
Experience: ${playerData.experience}
Location: ${playerData.location}

Goals:
${playerData.goals}`
            };
            
            try {
                const response = await fetch('https://api.web3forms.com/submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(emailData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Add player to list
                    players.unshift({
                        name: playerData.name,
                        position: playerData.position,
                        experience: playerData.experience,
                        location: playerData.location,
                        goals: playerData.goals
                    });
                    
                    renderPlayers();
                    event.target.reset();
                    showToast('Registration submitted successfully!');
                } else {
                    throw new Error('Submission failed');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Failed to submit registration. Please try again.', true);
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Register';
            }
        }

        // Trainer Form Submission
        async function handleTrainerSubmit(event) {
            event.preventDefault();
            
            const submitBtn = document.getElementById('trainerSubmitBtn');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Submitting...';
            
            const formData = new FormData(event.target);
            const trainerData = {
                name: formData.get('name'),
                specialty: formData.get('specialty'),
                experience: formData.get('experience'),
                location: formData.get('location'),
                certifications: formData.get('certifications'),
                bio: formData.get('bio')
            };
            
            // Prepare Web3Forms data
            const emailData = {
                access_key: '5f00a5e3-6e98-473a-bc9a-8653dfaf6f92',
                subject: 'New Trainer Registration - Hoopers Hub',
                from_name: 'Hoopers Hub',
                to: 'ladwarikin@gmail.com',
                name: trainerData.name,
                message: `New Trainer Registration:
                
Name: ${trainerData.name}
Specialty: ${trainerData.specialty}
Experience: ${trainerData.experience}
Location: ${trainerData.location}
Certifications: ${trainerData.certifications}

Bio:
${trainerData.bio}`
            };
            
            try {
                const response = await fetch('https://api.web3forms.com/submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(emailData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Add trainer to list
                    trainers.unshift({
                        name: trainerData.name,
                        specialty: trainerData.specialty,
                        experience: trainerData.experience,
                        location: trainerData.location,
                        certifications: trainerData.certifications,
                        bio: trainerData.bio
                    });
                    
                    renderTrainers();
                    event.target.reset();
                    showToast('Registration submitted successfully!');
                } else {
                    throw new Error('Submission failed');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Failed to submit registration. Please try again.', true);
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Register';
            }
        }

        // Render Players
        function renderPlayers() {
            const grid = document.getElementById('playersGrid');
            const empty = document.getElementById('playersEmpty');
            
            if (players.length === 0) {
                grid.style.display = 'none';
                empty.style.display = 'block';
            } else {
                grid.style.display = 'grid';
                empty.style.display = 'none';
                
                grid.innerHTML = players.map(player => `
                    <div class="listing-card">
                        <h3>${player.name}</h3>
                        <div class="listing-type">${player.position}</div>
                        <div class="listing-location">📍 ${player.location}</div>
                        <p>${player.goals.substring(0, 100)}${player.goals.length > 100 ? '...' : ''}</p>
                        <div class="listing-tags">
                            <span class="tag">${player.experience}</span>
                            <span class="tag">New Player</span>
                        </div>
                    </div>
                `).join('');
            }
        }

        // Render Trainers
        function renderTrainers() {
            const grid = document.getElementById('trainersGrid');
            const empty = document.getElementById('trainersEmpty');
            
            if (trainers.length === 0) {
                grid.style.display = 'none';
                empty.style.display = 'block';
            } else {
                grid.style.display = 'grid';
                empty.style.display = 'none';
                
                grid.innerHTML = trainers.map(trainer => `
                    <div class="listing-card">
                        <h3>${trainer.name}</h3>
                        <div class="listing-type">${trainer.specialty}</div>
                        <div class="listing-location">📍 ${trainer.location}</div>
                        <p>${trainer.bio.substring(0, 100)}${trainer.bio.length > 100 ? '...' : ''}</p>
                        <div class="listing-tags">
                            <span class="tag">${trainer.experience}</span>
                            <span class="tag">${trainer.certifications.split(',')[0].trim()}</span>
                        </div>
                    </div>
                `).join('');
            }
        }

        // Initialize
        initAuth();
        renderPlayers();
        renderTrainers();
    </script>
</body>
</html>
